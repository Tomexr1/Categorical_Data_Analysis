---
title: "Matematyczne modelowanie procesów decyzyjnych w finansach"
author: "Rafał Głodek, Joanna Kusy, Oliwia Makuch, Tomasz Srebniak"
format:
  revealjs:
    scrollable: true
    transition: slide
    theme: serif
    self-contained: true
    header-includes:
      - |
        <style>
          .justified-text {
            text-align: justify;
          }
          .reveal section {
              padding-right: 30px; /* Dodaj margines po prawej stronie */
            }
        </style>
title-slide-attributes:
    data-background-image: "images/img_prezentacja2.jpg"
    data-background-size: cover
    data-background-opacity: "0.65"
    data-background-color: "#000000"
jupyter: python3
---

## Alternatywne miary ryzyka {.smaller}

<!-- # ```{r} -->
<!-- # #| code-fold: true -->
<!-- # library(reticulate) -->
<!-- # w -->
<!-- # ``` -->

```{python}
import numpy as np # Load numpy  package
import matplotlib.pyplot as plt # Load matplotlib package
import pandas as pd
import pyfolio as pf
from IPython.display import display
```


![](images/wykres_ryzyka){fig-align="center" width="75%"}

-   Miara ryzyka powinna się skupiać na ujemnych zwrotach, np. największym spadku (ang. Maximum Drawdown) lub współczynniku Sortino.

## Alternatywne miary ryzyka {.smaller}
::::: columns
::: {.column style="padding-top: 10px;"}
#### Współczynnik Sharpe'a
$$
\small{
Sharpe = (R_p-R_f)\cdot{\sigma_j}^{-1}, \\
Sharpe - \text{współczynnik Sharpe'a}, \\
R_p - \text{zannualizowana średnia stopa zwrotu}, \\
R_f - \text{stopa zwrotu wolna od ryzyka}, \\
\sigma_j - \text{odchylenie standardowe portfela}.}
$$
:::
::: column
#### Współczynnik Sortino
$$
\small{
Sortino = (R_j-R_f)\cdot{\sigma_d}^{-1}, \\
Sortino - \text{współczynnik Sortino}, \\
R_j - \text{zannualizowana średnia stopa zwrotu}, \\
R_f - \text{stopa zwrotu wolna od ryzyka}, \\
\sigma_d = \sqrt{\frac{1}{\sum_{i=1}^{n} \mathbf{1}_{\{R_i - R_f < 0\}}}\sum_{i=1}^{n} \min(0, R_i - R_f)^2} - \\
-\text{ odchylenie standardowe ujemnych zwrotów}.
}
$$
:::
:::::
## Współczynnik Sortino {.smaller}
```{python}
files = ['googl.us.txt']
labels = ['GOOGL']

# Tworzenie pustego DataFrame
data = pd.DataFrame()

# Iteracja po plikach i ładowanie danych
for file, label in zip(files, labels):
    df = pd.read_csv('data/'+file, usecols=['Date', 'Close'])  # Wczytanie tylko daty i ceny zamknięcia
    df['Date'] = pd.to_datetime(df['Date']) # Konwersja daty
    df.set_index('Date', inplace=True)  # Ustawienie daty jako indeksu
    data[label] = df['Close']  # Dodanie kolumny z cenami zamknięcia

# Filtrowanie zakresu lat 2006-2015
data = data.loc['2006-01-01':'2015-12-31']
```

::::: columns
::: {.column style="padding-top: 10px;"}
```{python}
data
```
:::

::: column
```{python}
data.plot()
```
:::
:::::

**Wskaźnik Sortino dla akcji Google**
```{python}
#| echo: true
#| include: true
rfr = 0.04
target_return = 0

returns = data.pct_change()
negative_returns = returns.loc[returns['GOOGL'] < target_return]
expected_return = returns.mean()
annualized_return = (expected_return+1)**252 - 1
down_std = negative_returns.std()

sortino_ratio = (annualized_return - rfr) / (down_std*np.sqrt(252))
```
Sortino dla akcji Google wynosi ok. `{python} float(np.round(sortino_ratio,3))`.
```{python}
sharpe_ratio = (annualized_return - rfr) / (returns.std()*np.sqrt(252))
```
Sharpe dla akcji Google wynosi ok. `{python} float(np.round(sharpe_ratio,3))`.

## Alternatywne miary ryzyka {.smaller}
#### Największy spadek (ang. Maximum Drawdown)
![](images/maximum_drawdown){fig-align="center" width="75%"}

-   Największa procentowa strata od szczytu do dna.

-   Zależy od wybranego okna czasowego.

## Największy spadek (ang. Maximum Drawdown) {.smaller}
```{python}
#| echo: true
#| include: true
# Maksymalne spadki
roll_max = data.rolling(center=False, min_periods=1, window=252).max()

# Dzienny spadek w stosunku do maksimum
daily_draw_down = data/roll_max - 1.0

# Maksymalny dzienny spadek
max_daily_draw_down = daily_draw_down.rolling(center=False, min_periods=1, window=252).min()

# Wykres
plt.figure(figsize=(15,8))
plt.plot(data.index, daily_draw_down, label='Dzienne spadki')
plt.plot(data.index, max_daily_draw_down, label='Maksymalne spadki w okresie 252 dni')
plt.legend()
plt.show()
```





## Pyfolio
![](images/pyfolio.png){fig-align="center" width="75%"}



```{python}
# sp500 = pd.read_csv('data/sp500.csv', index_col=0)
# sp500.index = pd.to_datetime(sp500.index, format="%d/%m/%Y")
# sp500 = sp500.pct_change().dropna().iloc[:, 0]
# sp500.index = pd.to_datetime(sp500.index, format="%d/%m/%Y")

# pf.show_perf_stats(sp500)
```
## Pyfolio
#### Dane
```{python}
#| echo: true
#| include: true
positions = pd.read_csv('data/test_pos.csv', index_col=0)
positions.index = pd.to_datetime(positions.index)

benchmark = pd.read_csv('data/sp500.csv', index_col=0, skiprows=2)
benchmark.index = pd.to_datetime(benchmark.index, format='%Y-%m-%d', utc=True)

display(positions)
```

## Pyfolio
#### Tear Sheet
```{python}
#| echo: true
#| include: true
returns = positions.sum(axis=1).pct_change().dropna()
benchmark_rets = benchmark.iloc[:,0].pct_change().dropna()
benchmark_rets.rename('SP500', inplace=True)

pf.create_full_tear_sheet(returns, benchmark_rets=benchmark_rets)
```

## Pyfolio
#### Position Tear Sheet
```{python}
#| echo: true
#| include: true
# Mapowanie sektorów
sect_map = {'COST': 'Consumer Goods',
            'INTC': 'Technology', 
            'CERN': 'Healthcare', 
            'GPS': 'Technology',
            'MMM': 'Construction', 
            'DELL': 'Technology', 
            'AMD': 'Technology'}

pf.create_position_tear_sheet(returns,positions, sector_mappings=sect_map)
```

## Teoria portfelowa

...po angielsku **modern portfolio theory** lub **mean--variance analysis**.

![](images/harry_markowitz.png){fig-align="center" width="635"}

## Główna idea – Efektywna granica

...czyli **Efficient frontier**.

To zbiór porfeli, dla których nie istnieje inny portfel o wyższym oczekiwanym zwrocie przy tym samym odchyleniu standardowym zwrotu (ryzyku).

Szukamy takich wag, które pozwolą nam zminimalizować wariancję

$$
\min_{\mathbf{w}} = \mathbf{w}^T\Sigma\mathbf{w}.
$$

Dla dobranych wag wartość oczekiwana zwrotu powinna odpowiadać ustalonemu poziomowi

$$
\mathbf{w}^T\mathbf{\mu} = \mu_p.
$$

Wagi muszą sumować się do 1

$$
\mathbf{w}^T\mathbf{1}=1.
$$

## Graficzna reprezentacja

![](images/the-efficient-frontier_plot.jpeg){fig-align="center" width="523"}

Źródło: <https://inyova.ch/en/expertise/efficient-frontier-investment-theory/>

## Biblioteka PyortfolioOpt


```{python}
#| echo: false
stock_prices = pd.read_csv("stock_prices.csv", parse_dates=True, index_col="date")
stock_prices.dropna(how='any', axis=1, inplace=True)
```

Jak wyglądają nasze dane?

```{python}
#| echo: false
stock_prices.head(3)
```

Importujemy potrzebne funkcje

```{python}
#| include: true
#| echo: true
from pypfopt import expected_returns
from pypfopt import risk_models
```

Liczymy średnie zwroty dla danych...

```{python}
#| include: true
#| echo: true
mu = expected_returns.mean_historical_return(stock_prices)
```

Pierwsze 5 wyników dla średnich zwrotów

```{python}
#| echo: false
print(mu[:5])
```

Liczymy macierz kowariancji zwrotów dla danych...

```{python}
#| include: true
#| echo: true
Sigma = risk_models.sample_cov(stock_prices)
```

Pierwsze 5 wyników dla macierzy kowariancji

```{python}
#| echo: false
print(Sigma.iloc[:5, :5])
```

## Wybór portfela

```{python}
#| include: true
#| echo: true
from pypfopt.efficient_frontier import EfficientFrontier
```

Liczymy Efficient frontier...

```{python}
#| include: true
#| echo: true
ef_return = EfficientFrontier(mu, Sigma)
ef_sharpe = EfficientFrontier(mu, Sigma)
ef_vol = EfficientFrontier(mu, Sigma)
```

<br>

Wybieramy porfel o rocznej stopie zwrotu 20%...

```{python}
#| output: false
#| echo: true
ef_return.efficient_return(0.2)
```

Wagi

```{python}
#| output: false
#| echo: true
ef_return.clean_weights()
```

```{python}
#| echo: false
weights = ef_return.clean_weights()
for asset, weight in weights.items():
    print(f"{asset}: {weight:.5f}")
```

Statystyki

```{python}
#| include: true
#| echo: true
ef_return.portfolio_performance(verbose=True)
```

<br>

Wybieramy porfel o najwyższym wskaźniku Sharpe'a...

```{python}
#| output: false
#| echo: true
ef_sharpe.max_sharpe()
```

Wagi

```{python}
#| echo: false
weights = ef_sharpe.clean_weights()
for asset, weight in weights.items():
    print(f"{asset}: {weight:.5f}")
```

Statystyki

```{python}
#| echo: false
ef_sharpe.portfolio_performance(verbose=True)
```

<br>

Wybieramy porfel o najmniejszej zmienności (odchyleniu standardowym zwrotów)...

```{python}
#| output: false
#| echo: true
ef_vol.min_volatility()
```

Wagi

```{python}
#| echo: false
weights = ef_vol.clean_weights()
for asset, weight in weights.items():
    print(f"{asset}: {weight:.5f}")
```

Statystyki

```{python}
#| echo: false
ef_vol.portfolio_performance(verbose=True)
```

## Alternatywne sposoby obliczania średniej i wariancji

#### Zwroty i ryzyko ważone wykładniczo

Nadajemy większe wagi nowym danym.

```{python}
#| include: true
#| output: false
#| echo: true
mu_exp = expected_returns.ema_historical_return(stock_prices, span=180, 
  frequency=252)
Sigma_exp = risk_models.exp_cov(stock_prices, span=180, frequency=252)
ef_exp = EfficientFrontier(mu_exp, Sigma_exp)
ef_exp.max_sharpe()
```

Statystyki

```{python}
#| echo: false
ef_exp.portfolio_performance(verbose=True)
```

<br>

#### Semikowariancja

... czyli wariancja ze zwrotów poniżej ustalonego benchmarku.

```{python}
#| include: true
#| echo: true
semi_Sigma = risk_models.semicovariance(stock_prices, 
  benchmark=0, frequency=252)
```

Pierwsze 5 wyników dla macierzy semikowariancji

```{python}
#| echo: false
print(semi_Sigma.iloc[:5, :5])
```
## Podsumowanie

-   Podstawowe pojęcia: Portfel, Dywersyfikacja, Zwrot, Wariancja
-   Miary ryzyka: Skośność, Kurtoza, Współczynnik Sharpe'a
-   Analiza wyników: Aktywne Wagi, Fama French, Pyfolio
-   Teoria portfelowa: Efektywna granica, Wybór portfela

## Źródła

-   <https://github.com/quantopian/pyfolio>

-   <https://pyportfolioopt.readthedocs.io/en/latest/index.html>

-   Markowitz, H.M. (March 1952). "Portfolio Selection". *The Journal of Finance*. **7** (1): 77-91. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.2307/2975974](https://doi.org/10.2307%2F2975974). [JSTOR](https://en.wikipedia.org/wiki/JSTOR_(identifier) "JSTOR (identifier)") [2975974](https://www.jstor.org/stable/2975974).

-   <https://gregorygundersen.com/blog/2022/01/09/geometry-efficient-frontier/>


