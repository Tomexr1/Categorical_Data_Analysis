---
title: "Matematyczne modelowanie procesów decyzyjnych w finansach"
author: "Rafał Głodek, Joanna Kusy, Oliwia Makuch, Tomasz Srebniak"
execute: 
  echo: true
format:
  revealjs:
    scrollable: true
    transition: slide
    theme: serif
    self-contained: true
    header-includes:
      - |
        <style>
          .justified-text {
            text-align: justify;
          }
          .reveal section {
              padding-right: 30px; /* Dodaj margines po prawej stronie */
            }
        </style>
title-slide-attributes:
    data-background-image: "images/img_prezentacja2.jpg"
    data-background-size: cover
    data-background-opacity: "0.65"
    data-background-color: "#000000"
---

```{r setup}
#| echo: false
#| warning: false
#| error: false
#| output: false
library(reticulate)
options(reticulate.python = "/opt/homebrew/bin/python3")
```

## Teoria portfelowa

...po angielsku **modern portfolio theory** lub **mean--variance analysis**.

![](images/harry_markowitz.png){fig-align="center" width="635"}

## Główna idea – Efektywna granica

...czyli **Efficient frontier**.

To zbiór porfeli, dla których nie istnieje inny portfel o wyższym oczekiwanym zwrocie przy tym samym odchyleniu standardowym zwrotu (ryzyku).

Szukamy takich wag, które pozwolą nam zminimalizować wariancję

$$
\min_{\mathbf{w}} = \mathbf{w}^T\Sigma\mathbf{w}.
$$

Dla dobranych wag wartość oczekiwana zwrotu powinna odpowiadać ustalonemu poziomowi

$$
\mathbf{w}^T\mathbf{\mu} = \mu_p.
$$

Wagi muszą sumować się do 1

$$
\mathbf{w}^T\mathbf{1}=1.
$$

## Graficzna reprezentacja

![](images/the-efficient-frontier_plot.jpeg){fig-align="center" width="523"}

Źródło: <https://inyova.ch/en/expertise/efficient-frontier-investment-theory/>

## Biblioteka PyortfolioOpt

```{python}
#| echo: false
import pandas as pd
```

```{python}
#| echo: false
stock_prices = pd.read_csv("stock_prices.csv", parse_dates=True, index_col="date")
stock_prices.dropna(how='any', axis=1, inplace=True)
```

Jak wyglądają nasze dane?

```{python}
#| echo: false
stock_prices.head(3)
```

Importujemy potrzebne funkcje

```{python}
#| include: true
from pypfopt import expected_returns
from pypfopt import risk_models
```

Liczymy średnie zwroty dla danych...

```{python}
#| include: true
mu = expected_returns.mean_historical_return(stock_prices)
```

Pierwsze 5 wyników dla średnich zwrotów

```{python}
#| echo: false
print(mu[:5])
```

Liczymy macierz kowariancji zwrotów dla danych...

```{python}
#| include: true
Sigma = risk_models.sample_cov(stock_prices)
```

Pierwsze 5 wyników dla macierzy kowariancji

```{python}
#| echo: false
print(Sigma.iloc[:5, :5])
```

## Wybór portfela

```{python}
#| include: true
from pypfopt.efficient_frontier import EfficientFrontier
```

Liczymy Efficient frontier...

```{python}
#| include: true
ef_return = EfficientFrontier(mu, Sigma)
ef_sharpe = EfficientFrontier(mu, Sigma)
ef_vol = EfficientFrontier(mu, Sigma)
```

<br>

Wybieramy porfel o rocznej stopie zwrotu 20%...

```{python}
#| output: false
ef_return.efficient_return(0.2)
```

Wagi

```{python}
#| output: false
ef_return.clean_weights()
```

```{python}
#| echo: false
weights = ef_return.clean_weights()
for asset, weight in weights.items():
    print(f"{asset}: {weight:.5f}")
```

Statystyki

```{python}
#| include: true
ef_return.portfolio_performance(verbose=True)
```

<br>

Wybieramy porfel o najwyższym wskaźniku Sharpe'a...

```{python}
#| output: false
ef_sharpe.max_sharpe()
```

Wagi

```{python}
#| echo: false
weights = ef_sharpe.clean_weights()
for asset, weight in weights.items():
    print(f"{asset}: {weight:.5f}")
```

Statystyki

```{python}
#| echo: false
ef_sharpe.portfolio_performance(verbose=True)
```

<br>

Wybieramy porfel o najmniejszej zmienności (odchyleniu standardowym zwrotów)...

```{python}
#| output: false
ef_vol.min_volatility()
```

Wagi

```{python}
#| echo: false
weights = ef_vol.clean_weights()
for asset, weight in weights.items():
    print(f"{asset}: {weight:.5f}")
```

Statystyki

```{python}
#| echo: false
ef_vol.portfolio_performance(verbose=True)
```

## Alternatywne sposoby obliczania średniej i wariancji

#### Zwroty i ryzyko ważone wykładniczo

Nadajemy większe wagi nowym danym.

```{python}
#| include: true
#| output: false
mu_exp = expected_returns.ema_historical_return(stock_prices, span=180, 
  frequency=252)
Sigma_exp = risk_models.exp_cov(stock_prices, span=180, frequency=252)
ef_exp = EfficientFrontier(mu_exp, Sigma_exp)
ef_exp.max_sharpe()
```

Statystyki

```{python}
#| echo: false
ef_exp.portfolio_performance(verbose=True)
```

<br>

#### Semikowariancja

... czyli wariancja ze zwrotów poniżej ustalonego benchamrku.

```{python}
#| include: true
semi_Sigma = risk_models.semicovariance(stock_prices, 
  benchmark=0, frequency=252)
```

Pierwsze 5 wyników dla macierzy semikowariancji

```{python}
#| echo: false
print(semi_Sigma.iloc[:5, :5])
```

## Źródła

-   <https://pyportfolioopt.readthedocs.io/en/latest/index.html>

-   Markowitz, H.M. (March 1952). "Portfolio Selection". *The Journal of Finance*. **7** (1): 77-91. [doi](https://en.wikipedia.org/wiki/Doi_(identifier) "Doi (identifier)"):[10.2307/2975974](https://doi.org/10.2307%2F2975974). [JSTOR](https://en.wikipedia.org/wiki/JSTOR_(identifier) "JSTOR (identifier)") [2975974](https://www.jstor.org/stable/2975974).

-   <https://gregorygundersen.com/blog/2022/01/09/geometry-efficient-frontier/>
